{
	"title" : "JSHint and NodeJS",
	"date" : "2011-06-11 15:19:29",
	"author" : "Guy"
}

I really love <a href="http://jshint.com/" target="_blank">JSHint</a>.  It is a fork of Douglas Crockford's <a href="http://www.jslint.com/" target="_blank">JSLint</a> tool.  Unfortunately, the way Mr Crockford likes his JavaScript is not always the same as the way we like our JavaScript, and so JSHint was born.  It is a <a href="http://en.wikipedia.org/wiki/Fork_(software_development)" target="_blank">fork</a> of JSLint and is much more configurable.  I would not like to say that it is less strict, because the rules are all there, but whereas in JS<strong>L</strong>int, many rules cannot be turned off, JS<strong>H</strong>int allows more flexibility and control over you JavaScript checking.

JSHint has a very good web page where you can paste your code an check it, but this is not always suitable or convenient.  What if you have hundreds of JavaScript files, or if you are checking files as part of an <a href="http://en.wikipedia.org/wiki/Build_automation" target="_blank">automated build process</a>?

Luckily, JSHint is compatible with <a href="http://nodejs.org/" target="_blank">NodeJS</a>, which means you can run the validation without the need of a browser.  I put together a small script that will take a list of files as arguments, and run them through JSHint.  Any errors will be output to the console.

The script assumes you have downloaded JSHint and that it is in a file named <strong>jshint.js</strong>, in the same directory as the NodeJS script.  It uses the JSHint <a href="http://jshint.com/#docs" target="_blank">default options</a>, but can easily be configured to customise the rules.

Usage:
<pre>node ./check.js path/to/file/1 path/to/file/2</pre>
<a href="https://gist.github.com/1012516" target="_blank">Here is the Gist</a>:

<script src="https://gist.github.com/1012516.js"> </script>
