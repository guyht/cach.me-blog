{
	"title" : "JavaScript Web Workers Tutorial: Parse wiki text in real time",
	"date" : "2011-01-17 23:18:39",
	"author" : "Guy"
}

One of the really great new features of HTML5 are JavaScript web workers.

From <a href="http://www.whatwg.org/specs/web-workers/current-work/">http://www.whatwg.org/specs/web-workers/current-work/</a>
<div style="border-style: solid; border-width: 1px; padding: 4px; font-family: 'Courier New', Courier, Monaco;">

This specification defines an API for running scripts in the background independently of any user interface scripts.

This allows for long-running scripts that are not interrupted by scripts that respond to clicks or other user interactions, and allows long tasks to be executed without yielding to keep the page responsive.

Workers (as these background scripts are called herein) are relatively heavy-weight, and are not intended to be used in large numbers. For example, it would be inappropriate to launch one worker for each pixel of a four megapixel image. The examples below show some appropriate uses of workers.

Generally, workers are expected to be long-lived, have a high start-up performance cost, and a high per-instance memory cost.

</div>
So, using workers we can execute scripts in the background while still manipulating DOM objects in the foreground, without having to wait for out background script to finish executing.  This has <strong>immense</strong> power.

Now, I will show you how to create a JavaScript Web Worker that will receive some wiki text, parse it into HTML and return it.  The wiki text will be taken from a text box and the HTML will be updated every time a key is pressed, so the rendered HTML will be <em>live</em>.  By using a worker, we do not need to wait for the script to finish executing before the user can perform another action on the page.

<strong>NOTE: You will need an HTML5 compatible browser for the following to work.  This has been tested to work on Chrome and Safari, it has not been tested in Firefox but may work, it definitely will not work in IE.</strong>

Registering a new web worker is very easy:
<script src="https://gist.github.com/1541065.js?file=1"></script>
Workers communicate with your scripts using <em>messages</em>.

The following will open up an alert box containing any messages sent from the worker.
<script src="https://gist.github.com/1541065.js?file=2"></script>
And to send messages to a worker
<script src="https://gist.github.com/1541065.js?file=3"></script>
But what about our worker?

Workers must be housed in their own files, I have named mine <strong>worker.js</strong>
<script src="https://gist.github.com/1541065.js?file=4"></script>
This will simply send the message received from the script back.

This is not very useful so lets expand our script a bit so we can create our wiki parser. <em>Browse to the bottom of this post for a sneak preview of it!</em>
<hr>
<h4>Wiki Parser</h4>

Lets create some basic HTML first.  Create a page called wiki.html and add the following


<script src="https://gist.github.com/1541065.js?file=5"></script>

Now we need to define the <em>init()</em> and <em>parse()</em> functions. (Note: the <em>parse()</em> function will be triggered every time a key is released in the text area.

Add the following just below the <em>body</em> tag


<script src="https://gist.github.com/1541065.js?file=6"></script>


The code can be summarised as follows:
<ul>
<li> Create a new worker from a script in a file called <em>Parser.js</em></li>
<li> Register an error handler </li>
<li> Register and onmessage function which will set the contents of the <em>'wiki_div'</em> to the data returned by the worker</li>
<li> Post a message to the worker with the contents of the textarea (this makes sure that if the text area has any content when the page is loaded, it will be parsed on the initial page load)</li>
<li> The <em>parse</em> function simply sends a message to the worker with the contents of the text area, every time it is called (in our case this will be every time a keyup event occurs in the textarea)</li></ul>

The error handling code
<script src="https://gist.github.com/1541065.js?file=7"></script>
is a neat little trick to help you debug your workers as errors do not show up in a debug console by default.

Now the contents of our worker: (<strong>This must be in a separate file called Parser.js</strong>)

<script src="https://gist.github.com/1541065.js?file=8"></script>

I will not go into detail as the wiki parser is explained in the comments, but lets look at the core components:
<script src="https://gist.github.com/1541065.js?file=9"></script>
This receives the message from wiki.html and then posts a message back with the data returned by the <em>parseWiki</em> function.

<script src="https://gist.github.com/1541065.js?file=10"></script>

The <em>parseWiki</em> function runs a set of regular expressions to change the wiki text into HTML.

<hr />
Now, here it is in action (assuming you have an HTML5 compatible browser):

<script type="text/javascript">function init() {
	document.parser = new Worker('http://www.cach.me/static/javascript/Blog-Parser.js');
	document.parser.onerror = function(event){
		throw new Error(event.message + " (" + event.filename + ":" + event.lineno + ")");
	};
	document.parser.onmessage = function(event) {
		document.getElementById('wiki_div').innerHTML = event.data;
	};
	document.parser.postMessage(document.getElementById('wiki_textarea').value);
}
function parse(obj) {
	document.parser.postMessage(obj.value);
}</script>
<style type='text/css'>
div#wiki_div {
padding-bottom: 20px;
padding-left: 20px;
background-color: #404040;
color: #c5c1bc;
font-size: 12px;
font-family: "Courier New", Courier, Monaco;
border-width: 1px;
border-style: solid;
border-color: #979797;
}
</style>
<div id='wiki_div'></div><br />
<textarea id='wiki_textarea' onkeyup='parse(this)' cols='75' rows='10'>= Header 1 =
== Header 2==
*Some bold text* _and some italic text_
This text is normal</textarea>
<script type='text/javascript'>init();</script>

<a href="http://www.cach.me/blog/wp-content/uploads/2011/01/Wiki.zip">Click here to download the working HTML and JS files</a>
